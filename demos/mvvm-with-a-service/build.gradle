plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.google.dagger.hilt
    alias libs.plugins.jetbrains.dokka
    alias libs.plugins.google.ksp
    alias libs.plugins.jetbrains.kotlin.android
}

apply from: '../../detekt/detekt.gradle'

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
}

tasks.dokkaHtml.configure {
    outputDirectory.set(file("documentation/kotlin"))
}

android {
    defaultConfig {
        applicationId 'com.grarcht.shuttle.demo.mvvm_with_a_service'
        compileSdk libs.versions.compileSdk.get().toInteger()
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility libs.versions.sourceCompatibility.get()
        targetCompatibility libs.versions.targetCompatibility.get()
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvmTarget.get()
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    namespace 'com.grarcht.shuttle.demo.mvvmwithaservice'
}

dependencies {
    implementation libs.jetbrainsKotlinDeps.stdlib
    implementation libs.jetbrainsKotlinDeps.coroutines
    implementation libs.android.appCompat
    implementation libs.android.constraintLayout
    implementation libs.android.material
    implementation libs.android.fragmentKtx
    implementation libs.android.lifecycle.extensions
    implementation libs.android.lifecycle.viewModel
    implementation libs.dependencyInjectionDeps.hilt
    implementation libs.android.coreKtx
    implementation libs.android.annotationJvm
    ksp libs.dependencyInjectionDeps.hiltCompiler
    implementation project(':demos-core-lib')
    implementation project(':demos-databinding-lib')

    // To use a single aar file dependency, do something like the following.
    // If another integration extension is desired, a corresponding configuration should be
    // declared here for the "solution-builder" project.
    // implementation project(path: ':solution-builder', configuration: 'withRoom')

    // To use lighter weight, independent dependencies, comment out the above dependency and
    // uncomment the following:
//     implementation project(':framework')
//     implementation project(':framework-integrations-persistence')
//     implementation project(':framework-integrations-extensions-room')

    // To use maven dependencies, use the following
    implementation libs.shuttle.framework
    implementation libs.shuttle.integrationsPersistence
    implementation libs.shuttle.integrationsExtensionsRoom
}