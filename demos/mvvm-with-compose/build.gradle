plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.jetbrains.dokka
    alias libs.plugins.google.dagger.hilt
    alias libs.plugins.android.junit5
    alias libs.plugins.jetbrains.kotlin.android
    alias libs.plugins.compose.compiler
    alias libs.plugins.google.ksp
}

apply from: '../../detekt/detekt.gradle'

dokkaHtml {
    outputDirectory.set(file("documentation/kotlin"))
}

android {
    namespace 'com.grarcht.shuttle.demo.mvvmwithcompose'

    defaultConfig {
        applicationId 'com.grarcht.shuttle.mvvm_with_compose'
        compileSdk libs.versions.compileSdk.get().toInteger()
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument("runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder")
    }

    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def name = details.requested.name
            if (name == "androidx.collection:collection:1.1.0" ||
                    name == "androidx.collection:collection-jvm:1.4.0") {
                details.useVersion("1.1.0")
            }
        }
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvmTarget.get()
    }

    compileOptions {
        sourceCompatibility libs.versions.sourceCompatibility.get()
        targetCompatibility libs.versions.targetCompatibility.get()
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.kotlinComposeCompilerExt.get()
    }

    def dependenciesType = "dependenciesType"
    flavorDimensions += dependenciesType

    productFlavors {
        artifacts { dimension dependenciesType }
        modules { dimension dependenciesType }
        solutionBuilder { dimension dependenciesType }
    }
}

dependencies {
    implementation libs.jetbrainsKotlinDeps.stdlib
    implementation libs.jetbrainsKotlinDeps.coroutines

    implementation libs.android.activityKtx
    implementation libs.android.annotationJvm
    implementation libs.android.appCompat
    implementation libs.android.compose.activity
    implementation libs.android.compose.foundation
    implementation libs.android.compose.foundationLayout
    implementation libs.android.compose.material
    implementation libs.android.compose.materialIcons
    implementation libs.android.compose.runtime
    implementation libs.android.compose.ui
    implementation libs.android.compose.uiTooling
    implementation libs.android.constraintLayout
    implementation libs.android.coreKtx
    implementation libs.android.lifecycle.extensions
    implementation libs.android.lifecycle.viewModel
    implementation libs.android.material

    api libs.dependencyInjectionDeps.hilt
    ksp libs.dependencyInjectionDeps.hiltCompiler

    implementation project(':demos-core-lib')

    // To use a single pom / gradle module, do something like the following.
    solutionBuilderImplementation project(path: ':solution-builder', configuration: 'withRoom')

    // Lighter weight, independent dependencies
    modulesImplementation project(':framework')
    modulesImplementation project(':framework-integrations-persistence')
    modulesImplementation project(':framework-integrations-extensions-room')

    // To use maven dependencies, use the following:
    artifactsImplementation libs.shuttle.framework
    artifactsImplementation libs.shuttle.integrationsPersistence
    artifactsImplementation libs.shuttle.integrationsExtensionsRoom

    androidTestImplementation libs.testingDeps.junit.ext
    androidTestImplementation libs.testingDeps.espresso.core
    androidTestRuntimeOnly libs.testingDeps.junit.junit5AndroidTestRunner
    testImplementation libs.testingDeps.junit.jupiterApi
    testRuntimeOnly libs.testingDeps.junit.jupiterEngine
}